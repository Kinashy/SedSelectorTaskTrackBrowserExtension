@page "/popup.html"
@using System;
@using System.Globalization;
@inherits BasePage
<!-- Calendar Icon -->
@code
{
    static private DateTime s_NowDate = DateTime.Now;
    private string Month = CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(s_NowDate.Month);
    private int DayOfTheMonth = s_NowDate.Day;
    private System.DayOfWeek DayOfWeek = s_NowDate.DayOfWeek;
    static private WebExtensions.Net.Storage.StorageArea Storage = null;
    static private string TaskList { get; set; }
    protected override void OnInitialized()
    {
        //Console.WriteLine("test");
        GetLocalStorage();
        base.OnInitialized();
    }
    [Parameter]
    public EventCallback<string> SearchChanged { get; set; }
    private async Task GetLocalStorage()
    {
        Storage = await WebExtensions.Storage.GetLocal();
        var json = (await Storage.Get(new WebExtensions.Net.Storage.StorageAreaGetKeys("tasks")));
        //Console.WriteLine(json.GetProperty("tasks").ToString());
        var tasksElement = json.GetProperty("tasks");
        List<string> list = new();
        foreach (System.Text.Json.JsonElement task in tasksElement.EnumerateArray())
        {
         //   if (task.GetProperty("dateForExecution").ToString().IndexOf())
        }
        //StatusCode = (await Storage.Get(new WebExtensions.Net.Storage.StorageAreaGetKeys("authCheck"))).ToString();
        //Console.WriteLine(StatusCode);
        await InvokeAsync(StateHasChanged);
    }
    private void PlusDay()
    {
        s_NowDate = s_NowDate.AddDays(1);
        //Month = CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(NowDate.Month);
        DayOfTheMonth = s_NowDate.Day;
        DayOfWeek = s_NowDate.DayOfWeek;
        //var res = await Storage.Get(new WebExtensions.Net.Storage.StorageAreaGetKeys("authCheck"));
        //var data =
        /*if (answer != null)
            {
            WebExtensions.Action.SetBadgeText(new WebExtensions.Net.ActionNs.SetBadgeTextDetails() { Text = "ON" });
        }*/
        //StatusCode = "from 8am to 9pm";
        //WebExtensions.Alarms.Create("kavo", new WebExtensions.Net.Alarms.AlarmInfo() { PeriodInMinutes = 1, DelayInMinutes = 1});
        //WebExtensions.Alarms.OnAlarm.AddListener(() => MinusDay());
    }
    private void MinusDay()
    {
        s_NowDate = s_NowDate.AddDays(-1);
        Month = CultureInfo.InvariantCulture.DateTimeFormat.GetMonthName(s_NowDate.Month);
        DayOfTheMonth = s_NowDate.Day;
        DayOfWeek = s_NowDate.DayOfWeek;
    }
}
<div class="min-w-32 bg-white min-h-48 p-5 mb-0 font-medium">
    <div class="w-32 flex-none rounded-t lg:rounded-t-none lg:rounded-l text-center shadow-lg ">
        <div class="block rounded-t overflow-hidden  text-center ">
            <div class="bg-blue text-white py-1">
                @Month
            </div>
            <div class="pt-1 border-l border-r border-white bg-white">
                <span class="arrow" @onclick="MinusDay">&lt</span>
                <span class="text-5xl font-bold leading-tight">
                    @DayOfTheMonth
                </span>
                <span class="arrow" @onclick="PlusDay">&gt</span>
            </div>
            <div class="border-l border-r border-b rounded-b-lg text-center border-white bg-white -pt-2 -mb-1">
                <span class="text-sm">
                    @DayOfWeek
                </span>
            </div>
            <div class="pb-2 border-l border-r border-b rounded-b-lg text-center border-white bg-white">
                <hr>
                <span class="text-xs leading-normal">
                    @((MarkupString)TaskList)
                </span>
            </div>
        </div>
    </div>
</div>